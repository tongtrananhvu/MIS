@page "/login"
@inject IJSRuntime js
@inject AuthenticationStateProvider _authenStateProvider
@inject NavigationManager _navManager
@using MISBlazorWeb.Services.Security
<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pg-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>

    </div>
</div>
@code {

    private class Model
    {
        public string? UserName { get; set; }
        public string? Password { get; set; }

    }
    private Model model = new Model();
    private async Task Authenticate()
    {
        bool _isAuthen = false;
        //if user login error
        if (_isAuthen == false)
        {
            await js.InvokeVoidAsync("Alert", "Invalid User or Password");
            return;
        }
        var misAuthenStateProvider = (MisAuthenticationStateProvider) _authenStateProvider;
        await misAuthenStateProvider.UpdateAuthenticationState(new UserSession
        { UserID = "hello",
            Department="test"
        });
        _navManager.NavigateTo("/", true);
    }
}

